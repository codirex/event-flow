package com.codirex.eventflow;

import java.util.Objects;

/**
 * Holds metadata about a subscriber method, typically generated by an annotation processor
 * (e.g., from an {@link com.codirex.eventflow.api.EventFlowIndex}).
 * This class is used to avoid reflection when possible by providing pre-processed information
 * about subscriber methods.
 *
 * It stores information such as the method name, event type, thread mode, priority, and whether
 * the subscription is sticky.
 */
public final class SubscriberInfo {
    private final String methodName;
    private final String eventType; // Store as String (fully qualified name)
    private final ThreadMode threadMode;
    private final int priority;
    private final boolean sticky;
    private final String
            subscriberClassName; // Fully qualified name of the class containing the subscriber
                                 // method

    /**
     * Constructs a new SubscriberInfo instance.
     *
     * @param subscriberClassName The fully qualified name of the class containing the subscriber method.
     * @param methodName The name of the subscriber method.
     * @param eventType The fully qualified name of the event type the method subscribes to.
     * @param threadMode The {@link ThreadMode} for event delivery.
     * @param priority The priority of the subscriber method.
     * @param sticky True if the subscription is sticky, false otherwise.
     */
    public SubscriberInfo(
            String subscriberClassName,
            String methodName,
            String eventType,
            ThreadMode threadMode,
            int priority,
            boolean sticky) {
        this.subscriberClassName = subscriberClassName;
        this.methodName = methodName;
        this.eventType = eventType;
        this.threadMode = threadMode;
        this.priority = priority;
        this.sticky = sticky;
    }

    /**
     * Returns the fully qualified name of the class that contains the subscriber method.
     * @return The subscriber class name.
     */
    public String getSubscriberClassName() {
        return subscriberClassName;
    }

    /**
     * Returns the name of the subscriber method.
     * @return The method name.
     */
    public String getMethodName() {
        return methodName;
    }

    /**
     * Returns the fully qualified name of the event type this subscriber method handles.
     * @return The event type name.
     */
    public String getEventType() {
        return eventType;
    }

    /**
     * Returns the {@link ThreadMode} in which the subscriber method should be invoked.
     * @return The thread mode.
     */
    public ThreadMode getThreadMode() {
        return threadMode;
    }

    /**
     * Returns the priority of the subscriber method. Higher values indicate higher priority.
     * @return The priority.
     */
    public int getPriority() {
        return priority;
    }

    /**
     * Returns whether this subscriber method should receive sticky events.
     * @return True if sticky, false otherwise.
     */
    public boolean isSticky() {
        return sticky;
    }

    /**
     * Compares this SubscriberInfo to the specified object. The result is true if and only if
     * the argument is not null and is a SubscriberInfo object that has the same values for
     * subscriber class name, method name, event type, thread mode, priority, and sticky flag.
     *
     * @param o The object to compare this SubscriberInfo against.
     * @return True if the given object represents a SubscriberInfo equivalent to this one, false otherwise.
     */
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        SubscriberInfo that = (SubscriberInfo) o;
        return priority == that.priority
                && sticky == that.sticky
                && Objects.equals(methodName, that.methodName)
                && Objects.equals(eventType, that.eventType)
                && threadMode == that.threadMode
                && Objects.equals(subscriberClassName, that.subscriberClassName);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                subscriberClassName, methodName, eventType, threadMode, priority, sticky);
    }

    /**
     * Returns a string representation of the SubscriberInfo object.
     *
     * @return A string representation of the object.
     */
    @Override
    public String toString() {
        return "SubscriberInfo{"
                + "subscriberClassName='"
                + subscriberClassName
                + '\''
                + ", methodName='"
                + methodName
                + '\''
                + ", eventType='"
                + eventType
                + '\''
                + ", threadMode="
                + threadMode
                + ", priority="
                + priority
                + ", sticky="
                + sticky
                + '}';
    }
}
