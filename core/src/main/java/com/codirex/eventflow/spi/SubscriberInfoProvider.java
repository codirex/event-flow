package com.codirex.eventflow.spi;

import com.codirex.eventflow.ThreadMode;

/**
 * Interface for objects that can provide information about a subscriber method.
 * This is used by {@link com.codirex.eventflow.EventFlow} to get details about how to
 * invoke a subscriber, regardless of whether the information comes from reflection
 * (see {@link com.codirex.eventflow.SubscriberMethod}) or a pre-compiled index
 * (see {@link com.codirex.eventflow.SubscriberInfo} which would typically be wrapped
 * or used by an implementation of this provider if generated by an index).
 * <p>
 * An {@link com.codirex.eventflow.api.EventFlowIndex} returns a list of these providers.
 */
public interface SubscriberInfoProvider {

    /**
     * Returns the class of the subscriber object that contains the subscriber method.
     *
     * @return The subscriber's class.
     */
    Class<?> getSubscriberClass();

    /**
     * Returns the name of the subscriber method.
     *
     * @return The name of the method.
     */
    String getSubscriberMethodName();

    /**
     * Returns the type of event the subscriber method is interested in.
     *
     * @return The event type (class).
     */
    Class<?> getEventType();

    /**
     * Returns the {@link ThreadMode} in which the subscriber method should be invoked.
     *
     * @return The thread mode.
     */
    ThreadMode getThreadMode();

    /**
     * Returns the priority of the subscriber method.
     * Higher values indicate higher priority.
     *
     * @return The priority.
     */
    int getPriority();

    /**
     * Indicates whether the subscriber method should receive sticky events.
     *
     * @return True if the subscription is sticky, false otherwise.
     */
    boolean isSticky();

    /**
     * Returns a {@link SubscriberMethodExecutor} capable of invoking the actual subscriber method.
     * This executor could be reflection-based or a direct, generated invocation.
     *
     * @return The method executor.
     */
    SubscriberMethodExecutor getMethodExecutor();
}
