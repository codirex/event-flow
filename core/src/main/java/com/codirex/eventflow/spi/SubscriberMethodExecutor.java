package com.codirex.eventflow.spi;

import java.lang.reflect.InvocationTargetException;

/**
 * Interface for invoking a subscriber method.
 * Implementations of this interface are responsible for the actual execution of a method
 * on a subscriber object with a given event.
 * <p>
 * This abstraction allows EventFlow to use different invocation strategies, such as
 * reflection ({@link ReflectiveMethodExecutor}) or direct method calls generated by
 * an annotation processor.
 *
 * @see ReflectiveMethodExecutor
 * @see SubscriberInfoProvider#getMethodExecutor()
 */
public interface SubscriberMethodExecutor {
	
    /**
     * Invokes the subscriber method on the given {@code subscriberTarget} with the specified {@code event}.
     *
     * @param subscriberTarget The instance of the subscriber class on which the method should be invoked.
     * @param event The event object to be passed as an argument to the subscriber method.
     * @throws InvocationTargetException if the underlying subscriber method throws an exception.
     *                                   The actual exception thrown by the method can be retrieved using {@link InvocationTargetException#getTargetException()}.
     * @throws com.codirex.eventflow.EventFlowException if any other error occurs during invocation
     *                                   (e.g., illegal access, argument mismatch if not caught earlier).
     */
    void invoke(Object subscriberTarget, Object event) throws InvocationTargetException;

}
