package com.codirex.eventflow.api;

import com.codirex.eventflow.spi.SubscriberInfoProvider;
import java.util.List;

/**
 * Interface for classes that provide subscriber information, typically generated by an
 * annotation processor.
 * EventFlow uses implementations of this interface to quickly find subscriber methods for a given class,
 * avoiding reflection and improving performance.
 * <p>
 * The annotation processor should generate a class that implements this interface. This class
 * will contain a mapping from subscriber classes to a list of {@link SubscriberInfoProvider}s
 * that describe each {@link com.codirex.eventflow.annotation.Subscribe @Subscribe} method
 * within that class.
 */
public interface EventFlowIndex {
    /**
     * Retrieves a list of {@link SubscriberInfoProvider}s for the given subscriber class.
     * Each provider in the list corresponds to a method annotated with
     * {@link com.codirex.eventflow.annotation.Subscribe @Subscribe} in the subscriber class.
     *
     * @param subscriberClass The class for which to retrieve subscriber information.
     * @return A list of {@link SubscriberInfoProvider}s. Returns an empty list if the class has no
     *         subscriber methods known to the index, or null if the class is not known by the index at all
     *         (though returning an empty list is preferred for unknown classes that have been processed).
     */
    List<SubscriberInfoProvider> getSubscriberInfoProviders(Class<?> subscriberClass);
}
